<%- include('../partials/layoutsAdmin.ejs'); %>
<body>
    <div class="wrapper">
        <%- include('../partials/sidebarUser.ejs'); %> 

        <div id="main-content" class="main p-3">
            <%- include('../partials/header.ejs'); %>

            <!-- contenido principal-->
            <h2 class="titulo-dashboard">Estadísticas de Usuario</h2>
            <input type="hidden" id="idUser" value="<%= user.id %>">

            <div class="contenedor-dashboard d-flex flex-column flex-lg-row">
                <!-- Gráfico de barras de rendimiento por curso -->
                <div class="chart-container col-12 col-lg-6 mb-4 mb-lg-0" style="padding-right: 20px;">
                    <div class="fondo-dashboard">
                        <h6 style="font-weight: bold;">Rendimiento por Curso (%)</h6>
                        <canvas id="barChart"></canvas>
                    </div>
                </div>

                <!-- Gráfico de barras con porcentaje de aprobados y desaprobados -->
                <div class="chart-container col-12 col-lg-6 mb-4 mb-lg-0" style="padding-left: 20px;">
                    <div class="fondo-dashboard">
                        <h6 style="font-weight: bold;">Exámenes Aprobados</h6>
                        <canvas id="examStatsChart"></canvas>
                    </div>
                </div>
            </div>

            <!-- Historial de exámenes debajo de los gráficos -->
            <h6 class="titulo-dashboard">Historial de Exámenes</h6>

            <div class="table-container">
                <div class="fondo-dashboard">

                    <table class="table table-striped" id="tablaExamenes">
                        <thead>
                            <tr>
                                <th scope="col">Examen</th>
                                <th scope="col">Canal</th>
                                <th scope="col">Modo</th>
                                <th scope="col">Fecha</th>
                                <th scope="col">Nota</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Las filas se llenarán con JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Incluir Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", async () => {
            const idUser = document.getElementById("idUser").value;
            console.log(idUser);
            try {
                // Fetch para obtener las estadísticas por usuario
                const estadisticasResponse = await fetch(`/estadisticas_usuario/${idUser}`);
                const estadisticas = await estadisticasResponse.json();
    
                // Fetch para obtener los datos de aprobados y desaprobados
                const aprobadosResponse = await fetch(`/aprobados_desaprobados/${idUser}`);
                const aprobadosData = await aprobadosResponse.json();
    
                // Fetch para obtener el historial de simulaciones del usuario
                const simulacionesResponse = await fetch(`/simulaciones_usuario/${idUser}`);
                const simulaciones = await simulacionesResponse.json();
    
                // Actualizar gráfico de barras: Rendimiento por Curso
                const cursos = estadisticas.map(item => item.nombre_materia);
                const rendimientos = estadisticas.map(item => parseFloat(item.porcentaje_acierto));
                actualizarGraficoRendimiento(cursos, rendimientos);
    
                // Actualizar gráfico de barras: Aprobados vs Desaprobados
                const examenesAprobados = parseInt(aprobadosData[0].aprobados);
                const examenesDesaprobados = parseInt(aprobadosData[0].desaprobados);
                actualizarGraficoAprobadosDesaprobados(examenesAprobados, examenesDesaprobados);
    
                // Actualizar tabla de historial de exámenes
                actualizarTablaHistorial(simulaciones);
    
            } catch (error) {
                console.error("Error al cargar datos:", error);
            }
        });
    
        // Función para actualizar el gráfico de rendimiento por curso
        function actualizarGraficoRendimiento(cursos, rendimientos) {
            // Crear un arreglo de objetos para combinar cursos y rendimientos
            const data = cursos.map((curso, index) => ({
                curso,
                rendimiento: rendimientos[index]
            }));

            // Ordenar por rendimiento de mayor a menor
            data.sort((a, b) => b.rendimiento - a.rendimiento);

            // Tomar los 5 primeros elementos
            const top5 = data.slice(0, 5);

            // Extraer los cursos y rendimientos de los top 5
            const topCursos = top5.map(item => item.curso);
            const topRendimientos = top5.map(item => item.rendimiento);

            // Crear el gráfico con los datos limitados a 5
            const ctxBar = document.getElementById('barChart').getContext('2d');
            new Chart(ctxBar, {
                type: 'bar',
                data: {
                    labels: topCursos,
                    datasets: [{
                        label: 'Rendimiento por Curso (%)',
                        data: topRendimientos,
                        backgroundColor: ['#007bff', '#28a745', '#ffc107', '#dc3545', '#6f42c1'], // Colores de ejemplo
                        borderColor: '#0056b3',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100 // Máximo porcentaje
                        }
                    },
                    plugins: {
                        legend: { display: false }
                    }
                }
            });
        }
    
        // Función para actualizar el gráfico de aprobados vs desaprobados
        function actualizarGraficoAprobadosDesaprobados(aprobados, desaprobados) {
            const ctxBarStats = document.getElementById('examStatsChart').getContext('2d');
            new Chart(ctxBarStats, {
                type: 'bar',
                data: {
                    labels: ['Aprobados', 'Desaprobados'],
                    datasets: [{
                        label: 'Estadísticas de Exámenes',
                        data: [aprobados, desaprobados],
                        backgroundColor: ['#28a745', '#dc3545'],
                        borderColor: ['#fff', '#fff'],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: Math.max(aprobados, desaprobados) + 10 // Ajustar el rango dinámicamente
                        }
                    },
                    plugins: {
                        legend: { display: false }
                    }
                }
            });
        }
    
        // Función para actualizar la tabla de historial de exámenes
        function actualizarTablaHistorial(simulaciones) {
            const tbody = document.getElementById('tablaExamenes').getElementsByTagName('tbody')[0];
            tbody.innerHTML = ''; // Limpiar cualquier contenido previo
    
            simulaciones.forEach(simulacion => {
                const fila = document.createElement('tr');
    
                const celdaExamen = document.createElement('td');
                celdaExamen.textContent = simulacion.Examen;
                fila.appendChild(celdaExamen);
    
                const celdaCanal = document.createElement('td');
                celdaCanal.textContent = simulacion.Canal;
                fila.appendChild(celdaCanal);
    
                const celdaModo = document.createElement('td');
                celdaModo.textContent = simulacion.Modo;
                fila.appendChild(celdaModo);
    
                const celdaFecha = document.createElement('td');
                const fecha = new Date(simulacion.Fecha);
                celdaFecha.textContent = fecha.toLocaleDateString(); // Formato de fecha local
                fila.appendChild(celdaFecha);
    
                const celdaNota = document.createElement('td');
                celdaNota.textContent = simulacion.Nota;
                fila.appendChild(celdaNota);
    
                tbody.appendChild(fila);
            });
        }
    </script>
    

    <%- include('../partials/endPageAdmin.ejs'); %>
</body>
